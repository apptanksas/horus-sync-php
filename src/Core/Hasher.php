<?php

namespace AppTank\Horus\Core;

/**
 * @internal Class Hasher
 *
 * Provides methods for hashing data using a specified algorithm.
 * This class supports hashing of associative arrays, ensuring all data is sorted and valid before generating the hash.
 *
 * @package AppTank\Horus\Core
 */
class Hasher
{
    // The hashing algorithm used
    const string ALGORITHM = "sha256";

    /**
     * Hashes an array of data using the specified algorithm.
     *
     * This method converts an associative array into a sorted string of its values,
     * and then generates a hash using the `sha256` algorithm. If the data contains
     * numeric keys, it converts them to string keys.
     *
     * @param array $data The data to hash, which must be an associative array with primitive values.
     * @return string The resulting hash string.
     * @throws \InvalidArgumentException If any of the array values are non-primitive types (arrays or objects).
     */
    public static function hash(array $data): string
    {
        // Validate if array keys are numeric
        if (count(array_filter(array_keys($data), 'is_int')) > 0) {
            // Set values as keys
            $data = array_combine(array_values($data), array_values($data));
        }

        // Validate if data contains primitive types only
        foreach ($data as $key => $value) {
            if (is_array($value) || is_object($value)) {
                throw new \InvalidArgumentException("Data key [$value] must be primitive types");
            }
        }

        $data = array_map(function ($value) {
            if (is_bool($value)) {
                return $value ? 'true' : 'false';
            }
            if (is_float($value)) {
                return self::floatToString($value);
            }
            return $value;
        }, $data);

        // Sort the array by key
        ksort($data);

        $payload = join("", $data);

        return hash(self::ALGORITHM, $payload);
    }

    /**
     * Gets the length of the hash generated by the current algorithm.
     *
     * @return int The length of the hash string.
     */
    public static function getHashLength(): int
    {
        return strlen(hash(self::ALGORITHM, "abc123"));
    }

    /**
     * Converts a float value to a string representation.
     *
     * @param float $value
     * @return string
     */
    private static function floatToString(float $value): string
    {
        $str = strval($value);

        if (floor($value) == $value) {
            $str .= '.0';
        }

        return $str;
    }
}
